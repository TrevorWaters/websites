@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<MudTabs PrevIcon="@Icons.Filled.SkipPrevious" NextIcon="@Icons.Filled.SkipNext" Elevation="0" DisableSliderAnimation="true" @bind-ActivePanelIndex="_activeTabIndex">

    <ChildContent>

        <MudProgressLinear Color="Color.Primary" Value="_value" Class="mb-1" />
        <CascadingValue Value="this">
            @foreach (var item in  _tabsList)
            {
                <MudTabPanel Text="@item.PanelName" BadgeData="@item.BadgeData" Icon="@item.IconPath" BadgeColor="@item.BadgeColor" Disabled="!item.IsEnabled">

                    <TabShell CardTitle="@item.CardTitle" CardTitleIconPath="@item.IconPath">
                        <CardContent>
                            @item.CardContent
                        </CardContent>
                    </TabShell>
                </MudTabPanel>
            }
        </CascadingValue>
    </ChildContent>
    <Header>
        <MudButtonGroup Variant="Variant.Outlined" Color="Color.Primary" Class="mr-2 d-flex align-center" DisableElevation="true">
            @if (_activeTabIndex != 0)
            {
                <MudTooltip Text="Go to previous step" aria-live="polite">
                    <MudButton StartIcon="@Icons.Material.Filled.ChevronLeft" OnClick="@( async () => await GoToPreviousTab())">Prev</MudButton>
                </MudTooltip>
            }
            @if (_nextButtonEnabled)
            {
                <MudTooltip Text="Go to next step" aria-live="polite">
                    <MudButton EndIcon="@Icons.Material.Filled.ChevronRight" OnClick="@( async () => await GoToNextTab())">Next</MudButton>
                </MudTooltip>
            }

        </MudButtonGroup>
    </Header>
</MudTabs>
<MudScrollToTop TopOffset="50" Style="z-index:2001;">
    <ChildContent>
        @if (_activeTabIndex != 0)
        {
            <MudTooltip Text="Go to previous step" aria-live="polite">
                <MudButton Style="z-index:2001;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ChevronLeft" OnClick="@( async () => await GoToPreviousTab())">Previous</MudButton>
            </MudTooltip>
        }
        @if (_nextButtonEnabled)
        {
            <MudTooltip Text="Go to next step">
                <MudButton Style="z-index:2001;" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ChevronRight" OnClick="@( async () => await GoToNextTab())">Next</MudButton>
            </MudTooltip>
        }
    </ChildContent>
</MudScrollToTop>
@code {
    /// <summary>
    /// Set the active panel from outside the component using @ref
    /// </summary>
    [Parameter]
    public List<TabView>  TabsList { get; set; }

    private List<TabView> _tabsList = new();
    private int _value;
    private int _progressPercentChange;
    private int _activeTabIndex;
    private bool _nextButtonEnabled;
    private bool _previousButtonEnabled;
    private int? _newActiveTabIndex;
    private IJSObjectReference? module;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _tabsList = TabsList;
        _progressPercentChange = 100 / (_tabsList.Count + 1);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/DCHP.STARS.ComponentsLibrary/Tabs/Wizard.razor.js");

        if (_newActiveTabIndex.HasValue)
        {//Per MudBlazor: the tab becomes available after it is rendered. Hence, have to set the index after render
            _activeTabIndex = _newActiveTabIndex.Value;
        //Show/hiding next buttons also goes here, since the user can just click on the tabs
            HandleNavigationButtonEnabling(_activeTabIndex);
            _newActiveTabIndex = null;
            StateHasChanged();
        }
        //Loading the Progress bar only here.
        CalculateProgressBar();
    }

    /// <summary>
    /// Switches to the tab if the tab is enabled. Also scrolls to the top of the page.
    /// </summary>
    /// <param name="tabIndex"></param>
    /// <returns></returns>
    public async Task SwitchToTab(int tabIndex)
    {

        if(_tabsList[tabIndex].IsEnabled)
        {
            _newActiveTabIndex = tabIndex;
            await ScrollToTopAsync();
        }
    }

    public async Task GoToPreviousTab()
    {
        if (PreviousEnabledTabExists(out int enabledIndex))
        {
            _newActiveTabIndex = enabledIndex;
            await ScrollToTopAsync();
        }
    }

    public async Task GoToNextTab()
    {
        if (NextEnabledTabExists(out int enabledIndex))
        {
            _newActiveTabIndex = enabledIndex;
            await ScrollToTopAsync();
        }
    }


    public void EnableTab(string panelName)
    {
        _tabsList.FirstOrDefault(x => x.PanelName == panelName).IsEnabled = true;
    }

    public void EnableTab(int tabIndex)
    {
        _tabsList[tabIndex].IsEnabled = true;
    }

    public void DisableTab(int tabIndex)
    {
        _tabsList.ElementAtOrDefault(tabIndex).IsEnabled = false;
        StateHasChanged();
    }

    public void DisableTabs(int[] tabIndices)
    {
        foreach (int index in tabIndices)
        {
            _tabsList[index].IsEnabled = false;
        };
        StateHasChanged();
    }

    public void DisableOtherTabs(int activeIndex)
    {

        for (int i = 0; i <  _tabsList.Count; i++)
        {
            if (i != activeIndex)
                _tabsList[i].IsEnabled = false;
        };
        StateHasChanged();
    }

    private void CalculateProgressBar()
    {
        _value = (_activeTabIndex + 1) * _progressPercentChange;
    }


    private void HandleNavigationButtonEnabling(int activeTabIndex)
    {

        _nextButtonEnabled = _tabsList.Any(x => _tabsList.IndexOf(x) > activeTabIndex && x.IsEnabled);
        _previousButtonEnabled = activeTabIndex - 1 > 0;
    }

    private bool PreviousEnabledTabExists(out int enabledIndex)
    {
        for (int i = (_activeTabIndex - 1); i >= 0; i--)
        {
            if (_tabsList[i].IsEnabled)
            {
                _previousButtonEnabled = true;
                enabledIndex = i;
                return true;
            }
        }
        _previousButtonEnabled = false;
        enabledIndex = 0;
        return false;
    }

    private bool NextEnabledTabExists(out int enabledIndex)
    {
        for (int i = (_activeTabIndex + 1); i < _tabsList.Count; i++)
        {
            if (_tabsList[i].IsEnabled)
            {
                _nextButtonEnabled = true;
                enabledIndex = i;
                return true;
            }
        }
        _nextButtonEnabled = false;
        enabledIndex = 0;
        return false;
    }

        private async Task ScrollToTopAsync()
    {
                    if (module is not null)
                await module.InvokeVoidAsync("scrollToTopInvoke");
    }
        }