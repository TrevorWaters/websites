@page "/AddUser"
@page "/EditUser/{UserId:long}"
@inherits BaseComponent;
@inject NavigationManager NavigationManager
@inject ToastService toastService

@if (UserId != 0)
{
    <Title value="Edit User"></Title>
}
else
{
    <Title value="Add User"></Title>

}

<EditForm Model="@UserVM" OnValidSubmit="@HandleValidSubmit" class="space-y-8 divide-y divide-gray-200">
    <DataAnnotationsValidator />
    <div class="space-y-8 divide-y divide-gray-200">
        <div class="pt-8">
            <div>
                <h3 class="text-lg leading-6 font-medium text-gray-900">
                    Personal Information
                </h3>
                <p class="mt-1 text-sm text-gray-500">
                    Please input the user's information.
                </p>
            </div>
            <input type="hidden" @bind-value="UserVM.UserId">
            <div class="mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                <div class="sm:col-span-3">
                    <CustomInputText Label="First Name" Id="first_name" @bind-Value="UserVM.FirstName" ValidationFor="@(() => UserVM.FirstName)" AutoComplete="given-name" />
                </div>

                <div class="sm:col-span-3">
                    <CustomInputText Label="Last Name" Id="last_name" @bind-Value="UserVM.LastName" ValidationFor="@(() => UserVM.LastName)" AutoComplete="family-name" />
                </div>

                <div class="sm:col-span-4">
                    <CustomInputText Label="Email Address" Id="email" @bind-Value="UserVM.EmailAddress" ValidationFor="@(() => UserVM.EmailAddress)" AutoComplete="email" />
                </div>
                <div class="sm:col-span-2">
                    <CustomInputText Label="Job Title" Id="jobtitle" @bind-Value="UserVM.JobTitle" ValidationFor="@(() => UserVM.JobTitle)" />
                </div>
                <div class="sm:col-span-3">
                    <CustomInputText Label="Work Phone Number" Id="phone" @bind-Value="UserVM.WorkPhone" ValidationFor="@(() => UserVM.WorkPhone)" AutoComplete="tel-national" />
                </div>
                @*  <div class="sm:col-span-1">
                    <label for="phoneExt" class="block text-sm font-medium text-gray-700">
                      Extension
                    </label>
                     <div class="mt-1">
                      <InputText @bind-Value="User.WorkPhone" id="phoneExt" name="phoneExt" type="text" autocomplete="tel-extension"
                        class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                    </div> *@
                <div class="sm:col-span-3">
                    <CustomInputText Label="Agency Name" Id="agency_name" @bind-Value="UserVM.AgencyName" ValidationFor="@(() => UserVM.AgencyName)" />
                </div>

                <div class="sm:col-span-3">
                    <CustomInputText Label="Agency Street Address" @bind-Value="UserVM.AgencyAddress" ValidationFor="@(() => UserVM.AgencyAddress)" AutoComplete="street-address" />
                </div>

                <div class="sm:col-span-2">
                    <CustomInputText Label="Agency City" Id="city" @bind-Value="UserVM.AgencyCity" ValidationFor="@(() => UserVM.AgencyCity)" />
                </div>

                <div class="sm:col-span-2">
                    <CustomInputText Label="Agency ZIP Code" Id="zip" @bind-Value="UserVM.AgencyZipCode" ValidationFor="@(() => UserVM.AgencyZipCode)" AutoComplete="postal-code" />
                </div>
                <div class="sm:col-span-6">
                    <CustomInputTextArea Label="Comments" Id="comments" @bind-Value="UserVM.Comments" ValidationFor="@(() => UserVM.Comments)" />
                    <p class="mt-2 text-sm text-gray-500">Please include any additional information here.</p>
                </div>
            </div>
        </div>
    </div>

    <div class="pt-8">
        <div>
            <h3 class="text-lg leading-6 font-medium text-gray-900">
                User Role
            </h3>
            <p class="mt-1 text-sm text-gray-500">
                Please select a role within the application.
            </p>
        </div>
        <div class="mt-6">
            <fieldset>
                <legend class="sr-only">
                    Select User Role
                </legend>
                <svg class="animate-spin h-5 w-5 mr-3 ..." viewBox="0 0 24 24">
                    <!-- ... -->
                </svg>
                <div x-data="{ active : 0 }" class="bg-white rounded-md -space-y-px w-1/2">
                    <InputRadioGroup Name="userrole" @bind-Value="UserVM.RoleId">
                        @foreach (var role in Roles)
                        {
                            <div :class="{'bg-indigo-50 border-indigo-200 z-10': active == @(role.RoleId), 'border-gray-200': active != @(role.RoleId) }" class="relative border rounded-tl-md rounded-tr-md p-4 flex">
                                <div class="flex items-center h-5" x-on:click="active = @(role.RoleId)">
                                    <InputRadio Name="userrole" Value="role.RoleId" class="focus:ring-indigo-500 h-4 w-4 mt-0.5 text-indigo-600 cursor-pointer border-gray-300" />
                                </div>
                                <label for="settings-option-0" class="ml-3 flex flex-col">
                                    <span class="block text-sm font-medium" :class="{ 'text-indigo-900': active == @(role.RoleId), 'text-gray-900': active != @(role.RoleId) }">
                                        @role.RoleName
                                    </span>
                                    <span class="block text-sm" x-bind:class="{'text-indigo-700': active == @(role.RoleId), 'text-gray-500': active != @(role.RoleId) }">
                                        @role.Description
                                    </span>
                                </label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
            </fieldset>
        </div>
    </div>
    <div class="pt-5">
        <div class="flex justify-end">
            <button type="button" class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Cancel
            </button>
            <button type="submit" class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Save
            </button>
        </div>
    </div>
</EditForm>


@code {
    private UserViewModel UserVM = new UserViewModel();
    [Parameter]
    public long UserId { get; set; }


    private IEnumerable<RolesViewModel> Roles;

    protected override async Task OnInitializedAsync()
    {
        InitDependencies();
        Roles = await GetRolesAsync(Roles);

        if (UserId !=0)
        {
            UserVM = await GetUserAsync(UserId);
            
        }
    }

    private async void HandleValidSubmit()
    {
        if (UserId !=0)
        {
            await UpdateUserAsync(UserVM);
            toastService.ShowToast("User edited", ToastLevel.Success);
        }
        else 
        {
            await AddUserAsync(UserVM);
            toastService.ShowToast("User added", ToastLevel.Success);
        }

        NavigationManager.NavigateTo("/");
    }
}