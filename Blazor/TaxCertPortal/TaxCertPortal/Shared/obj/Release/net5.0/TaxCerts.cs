// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TaxCerts.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TaxCertPortal.Shared {

  /// <summary>Holder for reflection information generated from TaxCerts.proto</summary>
  public static partial class TaxCertsReflection {

    #region Descriptor
    /// <summary>File descriptor for TaxCerts.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaxCertsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5UYXhDZXJ0cy5wcm90bxIOVGF4Q2VydGlmaWNhdGUiIQoQQ2VydGlmaWNh",
            "dGVSZXBseRINCgVyZXBseRgBIAEoCSKFAgoXVGF4Q2VydGlmaWNhdGVWaWV3",
            "TW9kZWwSFgoJVGF4Q2VydElEGAEgASgFSACIAQESFAoMUGFyY2VsTnVtYmVy",
            "GAIgASgJEg4KBkNlcnRJRBgDIAEoCRISCgpVbnBhaWRZZWFyGAQgASgJEhAK",
            "CENlcnRDb3N0GAUgASgJEhgKEENlcnRJbnRlcmVzdENvc3QYBiABKAkSEwoL",
            "UHVyY2hhc2VGZWUYByABKAkSEgoKQmlsbE51bWJlchgIIAEoCRISCgpEYXRl",
            "Qm91Z2h0GAkgASgJEhAKCENvbW1lbnRzGAogASgJEg8KB0FjcmVhZ2UYCyAB",
            "KAlCDAoKX1RheENlcnRJRDJuCg9UYXhDZXJ0aWZpY2F0ZXMSWwoOQWRkQ2Vy",
            "dGlmaWNhdGUSJy5UYXhDZXJ0aWZpY2F0ZS5UYXhDZXJ0aWZpY2F0ZVZpZXdN",
            "b2RlbBogLlRheENlcnRpZmljYXRlLkNlcnRpZmljYXRlUmVwbHlCF6oCFFRh",
            "eENlcnRQb3J0YWwuU2hhcmVkYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TaxCertPortal.Shared.CertificateReply), global::TaxCertPortal.Shared.CertificateReply.Parser, new[]{ "Reply" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TaxCertPortal.Shared.TaxCertificateViewModel), global::TaxCertPortal.Shared.TaxCertificateViewModel.Parser, new[]{ "TaxCertID", "ParcelNumber", "CertID", "UnpaidYear", "CertCost", "CertInterestCost", "PurchaseFee", "BillNumber", "DateBought", "Comments", "Acreage" }, new[]{ "TaxCertID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CertificateReply : pb::IMessage<CertificateReply>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CertificateReply> _parser = new pb::MessageParser<CertificateReply>(() => new CertificateReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CertificateReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TaxCertPortal.Shared.TaxCertsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateReply(CertificateReply other) : this() {
      reply_ = other.reply_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateReply Clone() {
      return new CertificateReply(this);
    }

    /// <summary>Field number for the "reply" field.</summary>
    public const int ReplyFieldNumber = 1;
    private string reply_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reply {
      get { return reply_; }
      set {
        reply_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CertificateReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CertificateReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reply != other.Reply) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reply.Length != 0) hash ^= Reply.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Reply.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Reply);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Reply.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Reply);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reply.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reply);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CertificateReply other) {
      if (other == null) {
        return;
      }
      if (other.Reply.Length != 0) {
        Reply = other.Reply;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Reply = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Reply = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TaxCertificateViewModel : pb::IMessage<TaxCertificateViewModel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TaxCertificateViewModel> _parser = new pb::MessageParser<TaxCertificateViewModel>(() => new TaxCertificateViewModel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxCertificateViewModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TaxCertPortal.Shared.TaxCertsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCertificateViewModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCertificateViewModel(TaxCertificateViewModel other) : this() {
      _hasBits0 = other._hasBits0;
      taxCertID_ = other.taxCertID_;
      parcelNumber_ = other.parcelNumber_;
      certID_ = other.certID_;
      unpaidYear_ = other.unpaidYear_;
      certCost_ = other.certCost_;
      certInterestCost_ = other.certInterestCost_;
      purchaseFee_ = other.purchaseFee_;
      billNumber_ = other.billNumber_;
      dateBought_ = other.dateBought_;
      comments_ = other.comments_;
      acreage_ = other.acreage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxCertificateViewModel Clone() {
      return new TaxCertificateViewModel(this);
    }

    /// <summary>Field number for the "TaxCertID" field.</summary>
    public const int TaxCertIDFieldNumber = 1;
    private int taxCertID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaxCertID {
      get { if ((_hasBits0 & 1) != 0) { return taxCertID_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        taxCertID_ = value;
      }
    }
    /// <summary>Gets whether the "TaxCertID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaxCertID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "TaxCertID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaxCertID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ParcelNumber" field.</summary>
    public const int ParcelNumberFieldNumber = 2;
    private string parcelNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParcelNumber {
      get { return parcelNumber_; }
      set {
        parcelNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CertID" field.</summary>
    public const int CertIDFieldNumber = 3;
    private string certID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertID {
      get { return certID_; }
      set {
        certID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnpaidYear" field.</summary>
    public const int UnpaidYearFieldNumber = 4;
    private string unpaidYear_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnpaidYear {
      get { return unpaidYear_; }
      set {
        unpaidYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CertCost" field.</summary>
    public const int CertCostFieldNumber = 5;
    private string certCost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertCost {
      get { return certCost_; }
      set {
        certCost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CertInterestCost" field.</summary>
    public const int CertInterestCostFieldNumber = 6;
    private string certInterestCost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertInterestCost {
      get { return certInterestCost_; }
      set {
        certInterestCost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PurchaseFee" field.</summary>
    public const int PurchaseFeeFieldNumber = 7;
    private string purchaseFee_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PurchaseFee {
      get { return purchaseFee_; }
      set {
        purchaseFee_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BillNumber" field.</summary>
    public const int BillNumberFieldNumber = 8;
    private string billNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BillNumber {
      get { return billNumber_; }
      set {
        billNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DateBought" field.</summary>
    public const int DateBoughtFieldNumber = 9;
    private string dateBought_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateBought {
      get { return dateBought_; }
      set {
        dateBought_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Comments" field.</summary>
    public const int CommentsFieldNumber = 10;
    private string comments_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Acreage" field.</summary>
    public const int AcreageFieldNumber = 11;
    private string acreage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Acreage {
      get { return acreage_; }
      set {
        acreage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxCertificateViewModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxCertificateViewModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaxCertID != other.TaxCertID) return false;
      if (ParcelNumber != other.ParcelNumber) return false;
      if (CertID != other.CertID) return false;
      if (UnpaidYear != other.UnpaidYear) return false;
      if (CertCost != other.CertCost) return false;
      if (CertInterestCost != other.CertInterestCost) return false;
      if (PurchaseFee != other.PurchaseFee) return false;
      if (BillNumber != other.BillNumber) return false;
      if (DateBought != other.DateBought) return false;
      if (Comments != other.Comments) return false;
      if (Acreage != other.Acreage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTaxCertID) hash ^= TaxCertID.GetHashCode();
      if (ParcelNumber.Length != 0) hash ^= ParcelNumber.GetHashCode();
      if (CertID.Length != 0) hash ^= CertID.GetHashCode();
      if (UnpaidYear.Length != 0) hash ^= UnpaidYear.GetHashCode();
      if (CertCost.Length != 0) hash ^= CertCost.GetHashCode();
      if (CertInterestCost.Length != 0) hash ^= CertInterestCost.GetHashCode();
      if (PurchaseFee.Length != 0) hash ^= PurchaseFee.GetHashCode();
      if (BillNumber.Length != 0) hash ^= BillNumber.GetHashCode();
      if (DateBought.Length != 0) hash ^= DateBought.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (Acreage.Length != 0) hash ^= Acreage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTaxCertID) {
        output.WriteRawTag(8);
        output.WriteInt32(TaxCertID);
      }
      if (ParcelNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParcelNumber);
      }
      if (CertID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CertID);
      }
      if (UnpaidYear.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UnpaidYear);
      }
      if (CertCost.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CertCost);
      }
      if (CertInterestCost.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CertInterestCost);
      }
      if (PurchaseFee.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PurchaseFee);
      }
      if (BillNumber.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BillNumber);
      }
      if (DateBought.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DateBought);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Comments);
      }
      if (Acreage.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Acreage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTaxCertID) {
        output.WriteRawTag(8);
        output.WriteInt32(TaxCertID);
      }
      if (ParcelNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParcelNumber);
      }
      if (CertID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CertID);
      }
      if (UnpaidYear.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UnpaidYear);
      }
      if (CertCost.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CertCost);
      }
      if (CertInterestCost.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CertInterestCost);
      }
      if (PurchaseFee.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PurchaseFee);
      }
      if (BillNumber.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BillNumber);
      }
      if (DateBought.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DateBought);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Comments);
      }
      if (Acreage.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Acreage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTaxCertID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaxCertID);
      }
      if (ParcelNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParcelNumber);
      }
      if (CertID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertID);
      }
      if (UnpaidYear.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnpaidYear);
      }
      if (CertCost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertCost);
      }
      if (CertInterestCost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertInterestCost);
      }
      if (PurchaseFee.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PurchaseFee);
      }
      if (BillNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BillNumber);
      }
      if (DateBought.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateBought);
      }
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (Acreage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Acreage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxCertificateViewModel other) {
      if (other == null) {
        return;
      }
      if (other.HasTaxCertID) {
        TaxCertID = other.TaxCertID;
      }
      if (other.ParcelNumber.Length != 0) {
        ParcelNumber = other.ParcelNumber;
      }
      if (other.CertID.Length != 0) {
        CertID = other.CertID;
      }
      if (other.UnpaidYear.Length != 0) {
        UnpaidYear = other.UnpaidYear;
      }
      if (other.CertCost.Length != 0) {
        CertCost = other.CertCost;
      }
      if (other.CertInterestCost.Length != 0) {
        CertInterestCost = other.CertInterestCost;
      }
      if (other.PurchaseFee.Length != 0) {
        PurchaseFee = other.PurchaseFee;
      }
      if (other.BillNumber.Length != 0) {
        BillNumber = other.BillNumber;
      }
      if (other.DateBought.Length != 0) {
        DateBought = other.DateBought;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.Acreage.Length != 0) {
        Acreage = other.Acreage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaxCertID = input.ReadInt32();
            break;
          }
          case 18: {
            ParcelNumber = input.ReadString();
            break;
          }
          case 26: {
            CertID = input.ReadString();
            break;
          }
          case 34: {
            UnpaidYear = input.ReadString();
            break;
          }
          case 42: {
            CertCost = input.ReadString();
            break;
          }
          case 50: {
            CertInterestCost = input.ReadString();
            break;
          }
          case 58: {
            PurchaseFee = input.ReadString();
            break;
          }
          case 66: {
            BillNumber = input.ReadString();
            break;
          }
          case 74: {
            DateBought = input.ReadString();
            break;
          }
          case 82: {
            Comments = input.ReadString();
            break;
          }
          case 90: {
            Acreage = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TaxCertID = input.ReadInt32();
            break;
          }
          case 18: {
            ParcelNumber = input.ReadString();
            break;
          }
          case 26: {
            CertID = input.ReadString();
            break;
          }
          case 34: {
            UnpaidYear = input.ReadString();
            break;
          }
          case 42: {
            CertCost = input.ReadString();
            break;
          }
          case 50: {
            CertInterestCost = input.ReadString();
            break;
          }
          case 58: {
            PurchaseFee = input.ReadString();
            break;
          }
          case 66: {
            BillNumber = input.ReadString();
            break;
          }
          case 74: {
            DateBought = input.ReadString();
            break;
          }
          case 82: {
            Comments = input.ReadString();
            break;
          }
          case 90: {
            Acreage = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
